#!/usr/bin/env bash
JVM熟悉的陌生人
JVM的技术之美，同样是它最大的挑战：没有什么可以被认为是“一次编译，到处运行”的应用。不是优化一个用例，一个应用，一个特定的用户负载，JVM不断的跟踪Java应用现在在做什么，并进行相应的优化。这种动态的运行导致了一系列动态的问题。当设计创新时（至少不是在我们向生产环境要性能时），致力于JVM的开发者不会依赖静态编译和可预测的分配率。
java  (javac ->) class -> java（ 启动class文件）－>生成应用意味着java虚拟机的运行

你是否知道我们当初为什么需要jvm?
他是一个软件，用来执行java的字节码，把字节码转换到硬件，操作系统的指令。
一次编写后，不需要改变原始代码就能在不同环境中执行，（可移植性）
一个JVM基本上是一个虚拟的执行环境，作为一个字节码指令机器，而用于分配执行任务和执行内存操作通过与底层的交互。

一个JVM同样为运行的Java应用管理动态资源。这就意味着它掌握分配和释放内存，在每个平台上保持一致的线程模型，在应用执行的地方用一种适于CPU架构的方式组织可执行的指令。JVM把开发人员从需要跟踪对象的引用和存活时长中解放出来。同样的它不用我们管理何时去释放内存——一个像C语言那样的非动态语言的痛点。

你可以把JVM当做是一个专门为Java运行的操作系统；它的工作是为Java应用管理运行环境。一个JVM是一个通过与底层交互的虚拟执行环境，作为一个字节码指令机器，而用于分配执行任务和执行内存操作。

JVM组件概述

有很多写JVM内部和性能优化的文章。作为这个系列的基础，我将会总结概述下JVM组件。这个简短的阅览会为刚接触JVM的开发者有特殊的帮助，会让你了解之后更想深入的讨论。

从一种语言到另一种——关于Java编译器

javac。静态
。静态编译器一次解释输入的代码，输出可执行的形式，这个是在程序执行时将被用到。因为输入是静态的，你将总能看到结果相同。只有当你修改原始代码并重新编译时，你才能看到不同的输出。
动态编译器，
http://ifeve.com/jvm-optimize-1/